# -*- coding: utf-8 -*-
"""「購買頻率與銷售額關係圖.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17sTOTAoFV4r9BIoB7nUZlqs-08zp_b3j
"""

from google.colab import drive
drive.mount('/content/drive')

# Colab資料夾設定方法
#import os 
#from google.colab import drive
#drive.mount('/content/drive')

# 查看現在工作路徑
#!pwd
#!ls

#os.chdir("/content/drive/MyDrive")  切換該目錄
#os.listdir()  確認目錄內容
#!ls

import pandas as pd 
import numpy as np
import datetime
import platform

df=pd.read_csv("https://storage.googleapis.com/api-file/201910_apple.csv",encoding='utf-8')
#df.shape
df["order_date"]=df["event_time"].values

del df["event_time"]

#df
df=df[["order_date","event_type","product_id","category_id","category_code","brand","price","user_id","user_session"]] #調整欄位順序

df.query('event_type == "purchase"',inplace=True)

#Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列
#如果要直接改名稱的話 ==>df.rename(columns={"order_date":"OrderDate"}) 
df=df.drop("user_session",axis=1)

#空值列全部刪除
df=df.dropna()

df=df[["user_id","event_type","product_id","category_id","category_code","brand","price","order_date"]]

df["values"]=1 #新增values欄位,讓他們的購買量都為1
purchase_list=df

purchase_list['order_date'] = pd.to_datetime(purchase_list['order_date'])# 將購買清單資料中'orderdate'的欄位，全部轉換成datetime格式
purchase_list['order_date'].dt.tz_localize(None)  #tz_localize=改變時區,None提供一個簡單版本的timestamp
purchase_list['order_date']= purchase_list['order_date'].dt.strftime("%Y-%m-%d") #將簡單版本的時間格式化為%Y-%m-%d

def date():
  global purchase_list
  st = input("請輸入起始日期(如2019-10-01) : ")
  et = input("請輸入終止日期(如2019-10-06) : ")
  try:
    if st >= purchase_list['order_date'].max() or purchase_list['order_date'].min() >= et:
      print("所輸入時間區間不存在於資料集，或者起始終止次序/格式不對")
      date()
    else:
      mask = purchase_list['order_date'] >= st
      purchase_list = purchase_list[mask]
      mask = purchase_list['order_date'] <= et
      purchase_list = purchase_list[mask]
  except TypeError:
    print("所輸入時間格式不對")
    date()
date()

#頻率計算
#frequency=算出每個user的總消費frequency
purchase_list['frequency'] = 1
frequency = purchase_list.groupby("user_id", #分類條件
                  as_index = False 
                  )['frequency'].sum() # 目的欄位 & 計算方式，max, min, mean, sum

# 刪除purchase_list的frequency欄位
del purchase_list['frequency']

moneytary = purchase_list.groupby("user_id", #分類條件
                  as_index = False # 分類條件是否要取代Index
                  )['price'].sum() # 目的欄位 & 計算方式，max, min, mean, sum

MaxPrice=moneytary['price'].max() 
moneytary['price'].median()
moneytary["price"]=(moneytary["price"]/MaxPrice)

moneytary.rename(columns={"price":"price_percentage"},inplace=True)

fm_list=moneytary.merge(frequency, # 即將合併上去的資料表
          on = ['user_id'], # 兩表間連接的key
          how='inner') # 合併的方式

m=fm_list['frequency'].median()
#統計frequency
fm_list['frequency'].value_counts()

#計算每個人的花費是最大值的多少百分比
fm_list["price_percentage"]=fm_list["price_percentage"].apply(lambda x: x*100) #%
x=fm_list["price_percentage"].median()
x2=fm_list["frequency"].median()

# 分類並標示出常貴客、常客,新客,一次客
fm_list['customer'] = np.where( (fm_list['frequency'] >x2) & (fm_list['price_percentage']>x), '常貴客',
   
                     np.where( (fm_list['frequency'] >x2) & ( fm_list['price_percentage']<=x), '常客',
                              
                              np.where( (fm_list['frequency'] <= x2) & ( fm_list['price_percentage']>x), '量販客',
                                       
                                       '新客'  )))

fm_list.rename(columns={"price_percentage":"price_percentage(%)"},inplace=True)
fm_list["price_percentage(%)"]=fm_list["price_percentage(%)"].apply(lambda x: format(x, '.2f'))
z=fm_list["price_percentage(%)"].median()

# Colab 進行matplotlib繪圖時顯示繁體中文
# 下載台北思源黑體並命名taipei_sans_tc_beta.ttf，移至指定路徑
!wget -O taipei_sans_tc_beta.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download
!mv taipei_sans_tc_beta.ttf /usr/local/lib/python3.6/dist-packages/matplotlib//mpl-data/fonts/ttf

from matplotlib.font_manager import FontProperties
import matplotlib.pyplot as plt 

# 自定義字體變數
myfont = FontProperties(fname=r'/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/taipei_sans_tc_beta.ttf')

# !!!!後續在相關函式中增加fontproperties=myfont屬性即可!!!!

textprops = dict(FontProperties=myfont)

# #autopct=最後面的(%%)百分比符號
# #fig, ax = plt.subplot()
# text=["這是常客","這是常貴客","這是新客","這是量販客"]
# fmpie = fm_list[['user_id','customer']].groupby("customer", as_index = True).sum()
# fmpie.plot.pie(subplots=True,figsize=(4,4),textprops=textprops,autopct='%.2f%%',labeldistance=None,explode=(0.1,0.1,0.1,0.1),shadow=True,fontsize=15) # 只爆炸第二块饼，爆炸距离是半径的0.1。
# #for i in range(len(text)):
# #  plt.annotate(text[i],xy=(x,y),xytext=(2*np.sign(x),2*y),fontproperties=myfont,xycoords='data')
# plt.title("購買頻率與銷售額關係圖",size=20,fontdict=textprops)
# plt.legend(prop=myfont,bbox_to_anchor=(1, 1))
# plt.axis('off')
# #plt.legend(prop=myfont)



from matplotlib.patches import Rectangle

rmpie = fm_list[['user_id','customer']].groupby("customer", as_index = True).sum()
text=["這是常客","這是常貴客","這是新客","這是量販客"]
rmpie.plot.pie(subplots=True,figsize=(5,5),textprops=textprops,autopct='%.2f%%', explode=(0.1,0.1,0.1,0.1),shadow=True,labeldistance=0.15,fontsize=15)
# a = plt.axhline(y=0.6,xmin=0,xmax=1,color='green',linewidth = 6.0)
# b = plt.axhline(y=0.6,xmin=0,xmax=1,color='red',linewidth = 6.0)
# c = plt.axhline(y=0.6,xmin=0,xmax=1,color='blue',linewidth = 6.0)
# d = plt.axhline(y=0.6,xmin=0,xmax=1,color=' ',linewidth = 6.0)

a = Rectangle((0, 0), 1, 1, fc="g", fill=True, edgecolor='green', linewidth=-1)
b = Rectangle((0, 0), 1, 1, fc="r", fill=True, edgecolor='red', linewidth=-1)
c = Rectangle((0, 0), 1, 1,  fill=True,  linewidth=-1)
d = Rectangle((0, 0), 1, 1, fc="orange", fill=True, edgecolor='orange', linewidth=-1)
text1 = "常客  frequency >{0} 天, monetery(中位數) <={1} 元".format(x2, x)
text2 = "常貴客 frequency >{0} 天, monetery(中位數) >{1} 元".format(x2, x)
text3 = "新客  frequency <={0} 天, monetery(中位數) <={1} 元".format(x2, x)
text4 = "量販客 frequency <={0} 天, monetery(中位數) >{1} 元".format(x2, x)
plt.title("購買頻率與銷售額關係圖",size=20,fontdict=textprops)
plt.legend([c,d,a,b],
      [text1,text2,text3,text4],
      prop=myfont,
      bbox_to_anchor=(1, 1)
      )

plt.axis('off') 

plt.grid(True)
plt.show()

!pip install tkinter

'''
def file():
  savefile = input("請輸入你想要的名單,如:新客名單,常客名單,常貴客名單,量販客名單:")
  try:
    if savefile=='新客名單':
      x1=fm_list.query('customer == "新客"')
      x1=x1[['user_id','customer']]
      x1.to_csv("新客名單",encoding="utf-8")
      print("新客名單儲存成功!")
    elif savefile=='常客名單':
      x2=fm_list.query('customer == "常客"')
      x2=x2[['user_id','customer']]
      x2.to_csv("常客名單",encoding="utf-8")
      print("常客名單儲存成功!")
    elif savefile=='常貴客名單':
      x3=fm_list.query('customer == "常貴客"')
      x3=x3[['user_id','customer']]
      x3.to_csv("常貴客名單",encoding="utf-8")
      print("常貴客名單儲存成功!")
    elif savefile=='量販客名單':
      x4=fm_list.query('customer == "量販客"')
      x4=x4[['user_id','customer']]
      x4.to_csv("量販客名單",encoding="utf-8")
      print("量販客名單儲存成功!")
    elif savefile=='0':
      exit(0)
    else:
      print("請輸入正確格式,若要離開請輸入0") 
      file()
  except TypeError:
    print("輸入型態錯誤!")
    file()
file()

#tkMessageBox.askyesno('儲存檔案', '是否要儲存檔案?', parent=root_window)
'''