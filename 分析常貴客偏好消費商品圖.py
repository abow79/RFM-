# -*- coding: utf-8 -*-
"""凱元改過「團專-分析常貴客偏好消費商品.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17wMk66HWIfviJ2nHT4lBA0ZdeM8Aaf_I
"""

import pandas as pd
import datetime
import numpy as np
import platform
# 判斷是甚麼作業系統
theOS = list(platform.uname())[0]
if theOS == 'Windows':
	theOS = '\\'
	theEncode = 'utf-8-sig'
else:
	theOS = '/'
	theEncode = 'utf-8'
df = pd.read_csv('/content/drive/MyDrive/201910_apple.csv', encoding=theEncode)

df["order_date"] = df["event_time"].values  
del df["event_time"]
df = df[["order_date","event_type","product_id","category_id","category_code","brand","price","user_id","user_session"]] 
#取出成交名單
df.query('event_type == "purchase"',inplace=True)
df['order_date'] = pd.to_datetime(df['order_date'])# 將購買清單資料中'orderdate'的欄位，全部轉換成datetime格式
df['order_date'].dt.tz_localize(None)  #tz_localize=改變時區,None提供一個簡單版本的timestamp
df['order_date']= df['order_date'].dt.strftime("%Y-%m-%d") #將簡單版本的時間格式化為%Y-%m-%d
df = df.drop("user_session",axis=1)
#空值列全部刪除
df = df.dropna()
df = df[["user_id","event_type","product_id","category_id","category_code","brand","price","order_date"]]
df["values"] = 1 #新增values欄位,讓他們的購買量都為1
purchase_list=df

def date():
  global purchase_list
  st = input("請輸入起始日期:如2019-10-01:")
  et = input("請輸入終止日期:如2019-10-06:")
  try:
    if st >= purchase_list['order_date'].max() or purchase_list['order_date'].min() >= et:
      print("所輸入時間區間不存在於資料集，或者起始終止次序/格式不對")
      date()
    else:
      mask = purchase_list['order_date'] >= st
      purchase_list = purchase_list[mask]
      mask = purchase_list['order_date'] <= et
      purchase_list = purchase_list[mask]
  except TypeError:
    print("所輸入時間格式不對")
    date()
date()

#頻率計算
#frequency=算出每個user的總消費frequency
purchase_list['frequency'] = 1
frequency = purchase_list.groupby("user_id", #分類條件
                  as_index = False 
                  )['frequency'].sum() # 目的欄位 & 計算方式，max, min, mean, sum
# 刪除purchase_list的frequency欄位
del purchase_list['frequency']
#金額統計
moneytary = purchase_list.groupby("user_id", #分類條件
                  as_index = False # 分類條件是否要取代Index
                  )['price'].sum() # 目的欄位 & 計算方式，max, min, mean, sum
#尋找金額最大值
MaxPrice = moneytary['price'].max()   
moneytary["price"]=(moneytary["price"]/MaxPrice)     
moneytary.rename(columns={"price":"price_percentage"},inplace=True) 
fm_list = moneytary.merge(frequency, # 即將合併上去的資料表
          on = ['user_id'], # 兩表間連接的key
          how='inner') # 合併的方式          
m = fm_list['frequency'].median()
fm_list['frequency'].value_counts().head(10) #算前幾個10
x2 = fm_list["price_percentage"].median()
fm_list["price_percentage"] = fm_list["price_percentage"].apply(lambda x: x*100)
x = fm_list["price_percentage"].median()
x2 = fm_list["frequency"].median()

# 分類並標示出常貴客、常客,新客,一次客
fm_list['customer'] = np.where( (fm_list['frequency'] >x2) & (fm_list['price_percentage']>x), '常貴客',
   
                     np.where( (fm_list['frequency'] >x2) & ( fm_list['price_percentage']<=x), '常客',
                              
                              np.where( (fm_list['frequency'] <= x2) & ( fm_list['price_percentage']>x), '量販客',
                                       
                                       '新客'  )))
fm_list.rename(columns={"price_percentage":"price_percentage(%)"},inplace=True)
fm_list["price_percentage(%)"]=fm_list["price_percentage(%)"].apply(lambda x: format(x, '.2f'))

# Colab 進行matplotlib繪圖時顯示繁體中文
# 下載台北思源黑體並命名taipei_sans_tc_beta.ttf，移至指定路徑
!wget -O taipei_sans_tc_beta.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download
!mv taipei_sans_tc_beta.ttf /usr/local/lib/python3.6/dist-packages/matplotlib//mpl-data/fonts/ttf

from matplotlib.font_manager import FontProperties
import matplotlib.pyplot as plt 

# 自定義字體變數
myfont = FontProperties(fname=r'/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/taipei_sans_tc_beta.ttf')

# !!!!後續在相關函式中增加fontproperties=myfont屬性即可!!!!
textprops = dict(FontProperties=myfont)

#取只有常貴客的資料
fm_list=fm_list[(fm_list["customer"]=="常貴客")]
df2 = pd.merge(purchase_list[["user_id","price","category_code"]],fm_list)
df2 = df2.drop(axis=1,columns="user_id")
df2 = df2.drop(axis=1,columns="price_percentage(%)")
df2 = df2.drop(axis=1,columns="frequency")
df2 = df2.groupby("category_code",as_index = False).sum()
df2['price']=df2['price'].astype(int)
df2 = df2.sort_values(by=['price'],ascending=False)

#圖案大小
plt.figure(figsize=(15,6))
ax = plt.subplot()
#設置數值

x = df2["category_code"]
y = df2["price"]

#畫圖
#align=条形的中心位置
#width=每个条形的宽度,0~1，默认0.8
#align=条形的中心位置	“center”,"lege"边缘
plt.bar(x,y,width = 0.35,align='center',color = 'c',alpha=0.8)


#label X
#设置x坐标轴刻度
plt.xticks(x,size='small')

#label Y
ax.set_ylabel('總金額',fontdict=textprops,rotation=0)
ax.yaxis.set_label_coords(-0.02,0.5)

#去除y的刻度
plt.yticks([])


#增加標題
plt.title("分析常貴客偏好消費商品",fontdict=textprops,fontsize=20)

#顯示金額(柱狀上)
#zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表
for a,b in zip(x,y):

    plt.text(a, b+0.05, '%.0f' % b, ha='center', va= 'bottom',fontsize=7)

plt.show()